{
	"Test Group": {
		"prefix": "gt",
		"body": [
			"group('$0', () {",
			"",
			"});"
		],
		"description": "A Test Group"
	},
	"Flutter Test": {
		"prefix": "aaa",
		"body": [
			"test('should $0', () async {",
			"    // arrange",
			"",
			"    // act",
			"",
			"    // assert",
			"});"
		],
		"description": "A Flutter Test Based on Arrange, Act and Assert"
	},
	"Rx BLoC": {
		"prefix": "rxbloc",
		"body": [
			"import 'dart:async';",
			"",
			"import 'package:rx_bloc/rx_bloc.dart';",
			"",
			"class $0Bloc extends BlocBase<$0Event, $0State> {",
			"",
			"  $0Bloc() {",
			"    initialyzer();",
			"  }",
			"",
			"  @override",
			"  late BehaviorSubject<$0State> state;",
			"  @override",
			"  late BehaviorSubject<$0Event> event;",
			"",
			"  @override",
			"  void initialyzer() {",
			"    state = BehaviorSubject();",
			"    event = BehaviorSubject.seeded($0InitialEvent());",
			"",
			"    mapEventToState();",
			"  }",
			"",
			"  @override",
			"  void mapEventToState() {",
			"    event.switchMap((e) async* {",
			"    yield $0LoadingState();",
			"",
			"    /// Put your logic here!",
			"",
			"    }).listen((value) => state.add(value));",
			"  }",
			"",
			"  @override",
			"  Future<void> dispose() async {",
			"    await state.close();",
			"    await event.close();",
			"  }",
			"",
			"}",
			"",
			"///",
			"/// EVENT SECTION",
			"///", 
			"class $0Event extends Equatable {",
			"  @override",
			"  List<Object> get props => [];",
			"}",
			"class $0InitialEvent extends $0Event {}",
			"",
			"///",
			"/// STATE SECTION",
			"///", 
			"class $0State extends Equatable {",
			"  @override",
			"  List<Object> get props => [];",
			"}",
			"class $0LoadingState extends $0State {}",
			"class $0ErrorState extends $0State {}",
			"class $0LoadedState extends $0State {}",
		],
        "description": "A Simple Dart BLoC Scaffold"
	}
}